
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Artista
 * 
 */
export type Artista = {
  id: number
  nome: string
}

/**
 * Model Album
 * 
 */
export type Album = {
  id: number
  nome: string
  ano: number
  artista_id: number
}

/**
 * Model Musicas
 * 
 */
export type Musicas = {
  id: number
  nome: string
  album_id: number
}

/**
 * Model Vendas
 * 
 */
export type Vendas = {
  id: number
  observacao: string
  album_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Artistas
 * const artistas = await prisma.artista.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Artistas
   * const artistas = await prisma.artista.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.artista`: Exposes CRUD operations for the **Artista** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artistas
    * const artistas = await prisma.artista.findMany()
    * ```
    */
  get artista(): Prisma.ArtistaDelegate<GlobalReject>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<GlobalReject>;

  /**
   * `prisma.musicas`: Exposes CRUD operations for the **Musicas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Musicas
    * const musicas = await prisma.musicas.findMany()
    * ```
    */
  get musicas(): Prisma.MusicasDelegate<GlobalReject>;

  /**
   * `prisma.vendas`: Exposes CRUD operations for the **Vendas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendas
    * const vendas = await prisma.vendas.findMany()
    * ```
    */
  get vendas(): Prisma.VendasDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Artista: 'Artista',
    Album: 'Album',
    Musicas: 'Musicas',
    Vendas: 'Vendas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArtistaCountOutputType
   */


  export type ArtistaCountOutputType = {
    albuns: number
  }

  export type ArtistaCountOutputTypeSelect = {
    albuns?: boolean
  }

  export type ArtistaCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ArtistaCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ArtistaCountOutputType
    : S extends undefined
    ? never
    : S extends ArtistaCountOutputTypeArgs
    ?'include' extends U
    ? ArtistaCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ArtistaCountOutputType ? ArtistaCountOutputType[P] : never
  } 
    : ArtistaCountOutputType
  : ArtistaCountOutputType




  // Custom InputTypes

  /**
   * ArtistaCountOutputType without action
   */
  export type ArtistaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ArtistaCountOutputType
     * 
    **/
    select?: ArtistaCountOutputTypeSelect | null
  }



  /**
   * Count Type AlbumCountOutputType
   */


  export type AlbumCountOutputType = {
    musicas: number
    vendas: number
  }

  export type AlbumCountOutputTypeSelect = {
    musicas?: boolean
    vendas?: boolean
  }

  export type AlbumCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AlbumCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AlbumCountOutputType
    : S extends undefined
    ? never
    : S extends AlbumCountOutputTypeArgs
    ?'include' extends U
    ? AlbumCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AlbumCountOutputType ? AlbumCountOutputType[P] : never
  } 
    : AlbumCountOutputType
  : AlbumCountOutputType




  // Custom InputTypes

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     * 
    **/
    select?: AlbumCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Artista
   */


  export type AggregateArtista = {
    _count: ArtistaCountAggregateOutputType | null
    _avg: ArtistaAvgAggregateOutputType | null
    _sum: ArtistaSumAggregateOutputType | null
    _min: ArtistaMinAggregateOutputType | null
    _max: ArtistaMaxAggregateOutputType | null
  }

  export type ArtistaAvgAggregateOutputType = {
    id: number | null
  }

  export type ArtistaSumAggregateOutputType = {
    id: number | null
  }

  export type ArtistaMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ArtistaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ArtistaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type ArtistaAvgAggregateInputType = {
    id?: true
  }

  export type ArtistaSumAggregateInputType = {
    id?: true
  }

  export type ArtistaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ArtistaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ArtistaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type ArtistaAggregateArgs = {
    /**
     * Filter which Artista to aggregate.
     * 
    **/
    where?: ArtistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artistas to fetch.
     * 
    **/
    orderBy?: Enumerable<ArtistaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ArtistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artistas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artistas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Artistas
    **/
    _count?: true | ArtistaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtistaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtistaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtistaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtistaMaxAggregateInputType
  }

  export type GetArtistaAggregateType<T extends ArtistaAggregateArgs> = {
        [P in keyof T & keyof AggregateArtista]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtista[P]>
      : GetScalarType<T[P], AggregateArtista[P]>
  }




  export type ArtistaGroupByArgs = {
    where?: ArtistaWhereInput
    orderBy?: Enumerable<ArtistaOrderByWithAggregationInput>
    by: Array<ArtistaScalarFieldEnum>
    having?: ArtistaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtistaCountAggregateInputType | true
    _avg?: ArtistaAvgAggregateInputType
    _sum?: ArtistaSumAggregateInputType
    _min?: ArtistaMinAggregateInputType
    _max?: ArtistaMaxAggregateInputType
  }


  export type ArtistaGroupByOutputType = {
    id: number
    nome: string
    _count: ArtistaCountAggregateOutputType | null
    _avg: ArtistaAvgAggregateOutputType | null
    _sum: ArtistaSumAggregateOutputType | null
    _min: ArtistaMinAggregateOutputType | null
    _max: ArtistaMaxAggregateOutputType | null
  }

  type GetArtistaGroupByPayload<T extends ArtistaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtistaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtistaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtistaGroupByOutputType[P]>
            : GetScalarType<T[P], ArtistaGroupByOutputType[P]>
        }
      >
    >


  export type ArtistaSelect = {
    id?: boolean
    nome?: boolean
    albuns?: boolean | AlbumFindManyArgs
    _count?: boolean | ArtistaCountOutputTypeArgs
  }

  export type ArtistaInclude = {
    albuns?: boolean | AlbumFindManyArgs
    _count?: boolean | ArtistaCountOutputTypeArgs
  }

  export type ArtistaGetPayload<
    S extends boolean | null | undefined | ArtistaArgs,
    U = keyof S
      > = S extends true
        ? Artista
    : S extends undefined
    ? never
    : S extends ArtistaArgs | ArtistaFindManyArgs
    ?'include' extends U
    ? Artista  & {
    [P in TrueKeys<S['include']>]:
        P extends 'albuns' ? Array < AlbumGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ArtistaCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'albuns' ? Array < AlbumGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ArtistaCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Artista ? Artista[P] : never
  } 
    : Artista
  : Artista


  type ArtistaCountArgs = Merge<
    Omit<ArtistaFindManyArgs, 'select' | 'include'> & {
      select?: ArtistaCountAggregateInputType | true
    }
  >

  export interface ArtistaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Artista that matches the filter.
     * @param {ArtistaFindUniqueArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtistaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ArtistaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Artista'> extends True ? CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>> : CheckSelect<T, Prisma__ArtistaClient<Artista | null, null>, Prisma__ArtistaClient<ArtistaGetPayload<T> | null, null>>

    /**
     * Find the first Artista that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaFindFirstArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtistaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ArtistaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Artista'> extends True ? CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>> : CheckSelect<T, Prisma__ArtistaClient<Artista | null, null>, Prisma__ArtistaClient<ArtistaGetPayload<T> | null, null>>

    /**
     * Find zero or more Artistas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artistas
     * const artistas = await prisma.artista.findMany()
     * 
     * // Get first 10 Artistas
     * const artistas = await prisma.artista.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artistaWithIdOnly = await prisma.artista.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtistaFindManyArgs>(
      args?: SelectSubset<T, ArtistaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Artista>>, PrismaPromise<Array<ArtistaGetPayload<T>>>>

    /**
     * Create a Artista.
     * @param {ArtistaCreateArgs} args - Arguments to create a Artista.
     * @example
     * // Create one Artista
     * const Artista = await prisma.artista.create({
     *   data: {
     *     // ... data to create a Artista
     *   }
     * })
     * 
    **/
    create<T extends ArtistaCreateArgs>(
      args: SelectSubset<T, ArtistaCreateArgs>
    ): CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>>

    /**
     * Create many Artistas.
     *     @param {ArtistaCreateManyArgs} args - Arguments to create many Artistas.
     *     @example
     *     // Create many Artistas
     *     const artista = await prisma.artista.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArtistaCreateManyArgs>(
      args?: SelectSubset<T, ArtistaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Artista.
     * @param {ArtistaDeleteArgs} args - Arguments to delete one Artista.
     * @example
     * // Delete one Artista
     * const Artista = await prisma.artista.delete({
     *   where: {
     *     // ... filter to delete one Artista
     *   }
     * })
     * 
    **/
    delete<T extends ArtistaDeleteArgs>(
      args: SelectSubset<T, ArtistaDeleteArgs>
    ): CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>>

    /**
     * Update one Artista.
     * @param {ArtistaUpdateArgs} args - Arguments to update one Artista.
     * @example
     * // Update one Artista
     * const artista = await prisma.artista.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtistaUpdateArgs>(
      args: SelectSubset<T, ArtistaUpdateArgs>
    ): CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>>

    /**
     * Delete zero or more Artistas.
     * @param {ArtistaDeleteManyArgs} args - Arguments to filter Artistas to delete.
     * @example
     * // Delete a few Artistas
     * const { count } = await prisma.artista.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtistaDeleteManyArgs>(
      args?: SelectSubset<T, ArtistaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artistas
     * const artista = await prisma.artista.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtistaUpdateManyArgs>(
      args: SelectSubset<T, ArtistaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Artista.
     * @param {ArtistaUpsertArgs} args - Arguments to update or create a Artista.
     * @example
     * // Update or create a Artista
     * const artista = await prisma.artista.upsert({
     *   create: {
     *     // ... data to create a Artista
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artista we want to update
     *   }
     * })
    **/
    upsert<T extends ArtistaUpsertArgs>(
      args: SelectSubset<T, ArtistaUpsertArgs>
    ): CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>>

    /**
     * Find one Artista that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ArtistaFindUniqueOrThrowArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtistaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ArtistaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>>

    /**
     * Find the first Artista that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaFindFirstOrThrowArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtistaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ArtistaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ArtistaClient<Artista>, Prisma__ArtistaClient<ArtistaGetPayload<T>>>

    /**
     * Count the number of Artistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaCountArgs} args - Arguments to filter Artistas to count.
     * @example
     * // Count the number of Artistas
     * const count = await prisma.artista.count({
     *   where: {
     *     // ... the filter for the Artistas we want to count
     *   }
     * })
    **/
    count<T extends ArtistaCountArgs>(
      args?: Subset<T, ArtistaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtistaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtistaAggregateArgs>(args: Subset<T, ArtistaAggregateArgs>): PrismaPromise<GetArtistaAggregateType<T>>

    /**
     * Group by Artista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtistaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtistaGroupByArgs['orderBy'] }
        : { orderBy?: ArtistaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtistaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtistaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Artista.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ArtistaClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    albuns<T extends AlbumFindManyArgs = {}>(args?: Subset<T, AlbumFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Album>| Null>, PrismaPromise<Array<AlbumGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Artista base type for findUnique actions
   */
  export type ArtistaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
    /**
     * Filter, which Artista to fetch.
     * 
    **/
    where: ArtistaWhereUniqueInput
  }

  /**
   * Artista: findUnique
   */
  export interface ArtistaFindUniqueArgs extends ArtistaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Artista base type for findFirst actions
   */
  export type ArtistaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
    /**
     * Filter, which Artista to fetch.
     * 
    **/
    where?: ArtistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artistas to fetch.
     * 
    **/
    orderBy?: Enumerable<ArtistaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artistas.
     * 
    **/
    cursor?: ArtistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artistas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artistas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artistas.
     * 
    **/
    distinct?: Enumerable<ArtistaScalarFieldEnum>
  }

  /**
   * Artista: findFirst
   */
  export interface ArtistaFindFirstArgs extends ArtistaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Artista findMany
   */
  export type ArtistaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
    /**
     * Filter, which Artistas to fetch.
     * 
    **/
    where?: ArtistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artistas to fetch.
     * 
    **/
    orderBy?: Enumerable<ArtistaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Artistas.
     * 
    **/
    cursor?: ArtistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artistas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artistas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtistaScalarFieldEnum>
  }


  /**
   * Artista create
   */
  export type ArtistaCreateArgs = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
    /**
     * The data needed to create a Artista.
     * 
    **/
    data: XOR<ArtistaCreateInput, ArtistaUncheckedCreateInput>
  }


  /**
   * Artista createMany
   */
  export type ArtistaCreateManyArgs = {
    /**
     * The data used to create many Artistas.
     * 
    **/
    data: Enumerable<ArtistaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Artista update
   */
  export type ArtistaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
    /**
     * The data needed to update a Artista.
     * 
    **/
    data: XOR<ArtistaUpdateInput, ArtistaUncheckedUpdateInput>
    /**
     * Choose, which Artista to update.
     * 
    **/
    where: ArtistaWhereUniqueInput
  }


  /**
   * Artista updateMany
   */
  export type ArtistaUpdateManyArgs = {
    /**
     * The data used to update Artistas.
     * 
    **/
    data: XOR<ArtistaUpdateManyMutationInput, ArtistaUncheckedUpdateManyInput>
    /**
     * Filter which Artistas to update
     * 
    **/
    where?: ArtistaWhereInput
  }


  /**
   * Artista upsert
   */
  export type ArtistaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
    /**
     * The filter to search for the Artista to update in case it exists.
     * 
    **/
    where: ArtistaWhereUniqueInput
    /**
     * In case the Artista found by the `where` argument doesn't exist, create a new Artista with this data.
     * 
    **/
    create: XOR<ArtistaCreateInput, ArtistaUncheckedCreateInput>
    /**
     * In case the Artista was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ArtistaUpdateInput, ArtistaUncheckedUpdateInput>
  }


  /**
   * Artista delete
   */
  export type ArtistaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
    /**
     * Filter which Artista to delete.
     * 
    **/
    where: ArtistaWhereUniqueInput
  }


  /**
   * Artista deleteMany
   */
  export type ArtistaDeleteManyArgs = {
    /**
     * Filter which Artistas to delete
     * 
    **/
    where?: ArtistaWhereInput
  }


  /**
   * Artista: findUniqueOrThrow
   */
  export type ArtistaFindUniqueOrThrowArgs = ArtistaFindUniqueArgsBase
      

  /**
   * Artista: findFirstOrThrow
   */
  export type ArtistaFindFirstOrThrowArgs = ArtistaFindFirstArgsBase
      

  /**
   * Artista without action
   */
  export type ArtistaArgs = {
    /**
     * Select specific fields to fetch from the Artista
     * 
    **/
    select?: ArtistaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArtistaInclude | null
  }



  /**
   * Model Album
   */


  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumAvgAggregateOutputType = {
    id: number | null
    ano: number | null
    artista_id: number | null
  }

  export type AlbumSumAggregateOutputType = {
    id: number | null
    ano: number | null
    artista_id: number | null
  }

  export type AlbumMinAggregateOutputType = {
    id: number | null
    nome: string | null
    ano: number | null
    artista_id: number | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    ano: number | null
    artista_id: number | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    nome: number
    ano: number
    artista_id: number
    _all: number
  }


  export type AlbumAvgAggregateInputType = {
    id?: true
    ano?: true
    artista_id?: true
  }

  export type AlbumSumAggregateInputType = {
    id?: true
    ano?: true
    artista_id?: true
  }

  export type AlbumMinAggregateInputType = {
    id?: true
    nome?: true
    ano?: true
    artista_id?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    nome?: true
    ano?: true
    artista_id?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    nome?: true
    ano?: true
    artista_id?: true
    _all?: true
  }

  export type AlbumAggregateArgs = {
    /**
     * Filter which Album to aggregate.
     * 
    **/
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     * 
    **/
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs = {
    where?: AlbumWhereInput
    orderBy?: Enumerable<AlbumOrderByWithAggregationInput>
    by: Array<AlbumScalarFieldEnum>
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _avg?: AlbumAvgAggregateInputType
    _sum?: AlbumSumAggregateInputType
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }


  export type AlbumGroupByOutputType = {
    id: number
    nome: string
    ano: number
    artista_id: number
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect = {
    id?: boolean
    nome?: boolean
    ano?: boolean
    artista_id?: boolean
    artista?: boolean | ArtistaArgs
    musicas?: boolean | MusicasFindManyArgs
    vendas?: boolean | VendasFindManyArgs
    _count?: boolean | AlbumCountOutputTypeArgs
  }

  export type AlbumInclude = {
    artista?: boolean | ArtistaArgs
    musicas?: boolean | MusicasFindManyArgs
    vendas?: boolean | VendasFindManyArgs
    _count?: boolean | AlbumCountOutputTypeArgs
  }

  export type AlbumGetPayload<
    S extends boolean | null | undefined | AlbumArgs,
    U = keyof S
      > = S extends true
        ? Album
    : S extends undefined
    ? never
    : S extends AlbumArgs | AlbumFindManyArgs
    ?'include' extends U
    ? Album  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artista' ? ArtistaGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'musicas' ? Array < MusicasGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'vendas' ? Array < VendasGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? AlbumCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artista' ? ArtistaGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'musicas' ? Array < MusicasGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'vendas' ? Array < VendasGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? AlbumCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Album ? Album[P] : never
  } 
    : Album
  : Album


  type AlbumCountArgs = Merge<
    Omit<AlbumFindManyArgs, 'select' | 'include'> & {
      select?: AlbumCountAggregateInputType | true
    }
  >

  export interface AlbumDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlbumFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AlbumFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Album'> extends True ? CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>> : CheckSelect<T, Prisma__AlbumClient<Album | null, null>, Prisma__AlbumClient<AlbumGetPayload<T> | null, null>>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlbumFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AlbumFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Album'> extends True ? CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>> : CheckSelect<T, Prisma__AlbumClient<Album | null, null>, Prisma__AlbumClient<AlbumGetPayload<T> | null, null>>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AlbumFindManyArgs>(
      args?: SelectSubset<T, AlbumFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Album>>, PrismaPromise<Array<AlbumGetPayload<T>>>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
    **/
    create<T extends AlbumCreateArgs>(
      args: SelectSubset<T, AlbumCreateArgs>
    ): CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>>

    /**
     * Create many Albums.
     *     @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     *     @example
     *     // Create many Albums
     *     const album = await prisma.album.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlbumCreateManyArgs>(
      args?: SelectSubset<T, AlbumCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
    **/
    delete<T extends AlbumDeleteArgs>(
      args: SelectSubset<T, AlbumDeleteArgs>
    ): CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlbumUpdateArgs>(
      args: SelectSubset<T, AlbumUpdateArgs>
    ): CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlbumDeleteManyArgs>(
      args?: SelectSubset<T, AlbumDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlbumUpdateManyArgs>(
      args: SelectSubset<T, AlbumUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
    **/
    upsert<T extends AlbumUpsertArgs>(
      args: SelectSubset<T, AlbumUpsertArgs>
    ): CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>>

    /**
     * Find one Album that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AlbumFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>>

    /**
     * Find the first Album that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AlbumFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AlbumClient<Album>, Prisma__AlbumClient<AlbumGetPayload<T>>>

    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AlbumClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artista<T extends ArtistaArgs = {}>(args?: Subset<T, ArtistaArgs>): CheckSelect<T, Prisma__ArtistaClient<Artista | Null>, Prisma__ArtistaClient<ArtistaGetPayload<T> | Null>>;

    musicas<T extends MusicasFindManyArgs = {}>(args?: Subset<T, MusicasFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Musicas>| Null>, PrismaPromise<Array<MusicasGetPayload<T>>| Null>>;

    vendas<T extends VendasFindManyArgs = {}>(args?: Subset<T, VendasFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vendas>| Null>, PrismaPromise<Array<VendasGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Album base type for findUnique actions
   */
  export type AlbumFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
    /**
     * Filter, which Album to fetch.
     * 
    **/
    where: AlbumWhereUniqueInput
  }

  /**
   * Album: findUnique
   */
  export interface AlbumFindUniqueArgs extends AlbumFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Album base type for findFirst actions
   */
  export type AlbumFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
    /**
     * Filter, which Album to fetch.
     * 
    **/
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     * 
    **/
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     * 
    **/
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     * 
    **/
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }

  /**
   * Album: findFirst
   */
  export interface AlbumFindFirstArgs extends AlbumFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Album findMany
   */
  export type AlbumFindManyArgs = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
    /**
     * Filter, which Albums to fetch.
     * 
    **/
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     * 
    **/
    orderBy?: Enumerable<AlbumOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     * 
    **/
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AlbumScalarFieldEnum>
  }


  /**
   * Album create
   */
  export type AlbumCreateArgs = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
    /**
     * The data needed to create a Album.
     * 
    **/
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }


  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs = {
    /**
     * The data used to create many Albums.
     * 
    **/
    data: Enumerable<AlbumCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Album update
   */
  export type AlbumUpdateArgs = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
    /**
     * The data needed to update a Album.
     * 
    **/
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     * 
    **/
    where: AlbumWhereUniqueInput
  }


  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs = {
    /**
     * The data used to update Albums.
     * 
    **/
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     * 
    **/
    where?: AlbumWhereInput
  }


  /**
   * Album upsert
   */
  export type AlbumUpsertArgs = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
    /**
     * The filter to search for the Album to update in case it exists.
     * 
    **/
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     * 
    **/
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }


  /**
   * Album delete
   */
  export type AlbumDeleteArgs = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
    /**
     * Filter which Album to delete.
     * 
    **/
    where: AlbumWhereUniqueInput
  }


  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs = {
    /**
     * Filter which Albums to delete
     * 
    **/
    where?: AlbumWhereInput
  }


  /**
   * Album: findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs = AlbumFindUniqueArgsBase
      

  /**
   * Album: findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs = AlbumFindFirstArgsBase
      

  /**
   * Album without action
   */
  export type AlbumArgs = {
    /**
     * Select specific fields to fetch from the Album
     * 
    **/
    select?: AlbumSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AlbumInclude | null
  }



  /**
   * Model Musicas
   */


  export type AggregateMusicas = {
    _count: MusicasCountAggregateOutputType | null
    _avg: MusicasAvgAggregateOutputType | null
    _sum: MusicasSumAggregateOutputType | null
    _min: MusicasMinAggregateOutputType | null
    _max: MusicasMaxAggregateOutputType | null
  }

  export type MusicasAvgAggregateOutputType = {
    id: number | null
    album_id: number | null
  }

  export type MusicasSumAggregateOutputType = {
    id: number | null
    album_id: number | null
  }

  export type MusicasMinAggregateOutputType = {
    id: number | null
    nome: string | null
    album_id: number | null
  }

  export type MusicasMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    album_id: number | null
  }

  export type MusicasCountAggregateOutputType = {
    id: number
    nome: number
    album_id: number
    _all: number
  }


  export type MusicasAvgAggregateInputType = {
    id?: true
    album_id?: true
  }

  export type MusicasSumAggregateInputType = {
    id?: true
    album_id?: true
  }

  export type MusicasMinAggregateInputType = {
    id?: true
    nome?: true
    album_id?: true
  }

  export type MusicasMaxAggregateInputType = {
    id?: true
    nome?: true
    album_id?: true
  }

  export type MusicasCountAggregateInputType = {
    id?: true
    nome?: true
    album_id?: true
    _all?: true
  }

  export type MusicasAggregateArgs = {
    /**
     * Filter which Musicas to aggregate.
     * 
    **/
    where?: MusicasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicas to fetch.
     * 
    **/
    orderBy?: Enumerable<MusicasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MusicasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Musicas
    **/
    _count?: true | MusicasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MusicasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MusicasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MusicasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MusicasMaxAggregateInputType
  }

  export type GetMusicasAggregateType<T extends MusicasAggregateArgs> = {
        [P in keyof T & keyof AggregateMusicas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMusicas[P]>
      : GetScalarType<T[P], AggregateMusicas[P]>
  }




  export type MusicasGroupByArgs = {
    where?: MusicasWhereInput
    orderBy?: Enumerable<MusicasOrderByWithAggregationInput>
    by: Array<MusicasScalarFieldEnum>
    having?: MusicasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MusicasCountAggregateInputType | true
    _avg?: MusicasAvgAggregateInputType
    _sum?: MusicasSumAggregateInputType
    _min?: MusicasMinAggregateInputType
    _max?: MusicasMaxAggregateInputType
  }


  export type MusicasGroupByOutputType = {
    id: number
    nome: string
    album_id: number
    _count: MusicasCountAggregateOutputType | null
    _avg: MusicasAvgAggregateOutputType | null
    _sum: MusicasSumAggregateOutputType | null
    _min: MusicasMinAggregateOutputType | null
    _max: MusicasMaxAggregateOutputType | null
  }

  type GetMusicasGroupByPayload<T extends MusicasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MusicasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MusicasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MusicasGroupByOutputType[P]>
            : GetScalarType<T[P], MusicasGroupByOutputType[P]>
        }
      >
    >


  export type MusicasSelect = {
    id?: boolean
    nome?: boolean
    album_id?: boolean
    album?: boolean | AlbumArgs
  }

  export type MusicasInclude = {
    album?: boolean | AlbumArgs
  }

  export type MusicasGetPayload<
    S extends boolean | null | undefined | MusicasArgs,
    U = keyof S
      > = S extends true
        ? Musicas
    : S extends undefined
    ? never
    : S extends MusicasArgs | MusicasFindManyArgs
    ?'include' extends U
    ? Musicas  & {
    [P in TrueKeys<S['include']>]:
        P extends 'album' ? AlbumGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'album' ? AlbumGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Musicas ? Musicas[P] : never
  } 
    : Musicas
  : Musicas


  type MusicasCountArgs = Merge<
    Omit<MusicasFindManyArgs, 'select' | 'include'> & {
      select?: MusicasCountAggregateInputType | true
    }
  >

  export interface MusicasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Musicas that matches the filter.
     * @param {MusicasFindUniqueArgs} args - Arguments to find a Musicas
     * @example
     * // Get one Musicas
     * const musicas = await prisma.musicas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MusicasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MusicasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Musicas'> extends True ? CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>> : CheckSelect<T, Prisma__MusicasClient<Musicas | null, null>, Prisma__MusicasClient<MusicasGetPayload<T> | null, null>>

    /**
     * Find the first Musicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicasFindFirstArgs} args - Arguments to find a Musicas
     * @example
     * // Get one Musicas
     * const musicas = await prisma.musicas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MusicasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MusicasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Musicas'> extends True ? CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>> : CheckSelect<T, Prisma__MusicasClient<Musicas | null, null>, Prisma__MusicasClient<MusicasGetPayload<T> | null, null>>

    /**
     * Find zero or more Musicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Musicas
     * const musicas = await prisma.musicas.findMany()
     * 
     * // Get first 10 Musicas
     * const musicas = await prisma.musicas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const musicasWithIdOnly = await prisma.musicas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MusicasFindManyArgs>(
      args?: SelectSubset<T, MusicasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Musicas>>, PrismaPromise<Array<MusicasGetPayload<T>>>>

    /**
     * Create a Musicas.
     * @param {MusicasCreateArgs} args - Arguments to create a Musicas.
     * @example
     * // Create one Musicas
     * const Musicas = await prisma.musicas.create({
     *   data: {
     *     // ... data to create a Musicas
     *   }
     * })
     * 
    **/
    create<T extends MusicasCreateArgs>(
      args: SelectSubset<T, MusicasCreateArgs>
    ): CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>>

    /**
     * Create many Musicas.
     *     @param {MusicasCreateManyArgs} args - Arguments to create many Musicas.
     *     @example
     *     // Create many Musicas
     *     const musicas = await prisma.musicas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MusicasCreateManyArgs>(
      args?: SelectSubset<T, MusicasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Musicas.
     * @param {MusicasDeleteArgs} args - Arguments to delete one Musicas.
     * @example
     * // Delete one Musicas
     * const Musicas = await prisma.musicas.delete({
     *   where: {
     *     // ... filter to delete one Musicas
     *   }
     * })
     * 
    **/
    delete<T extends MusicasDeleteArgs>(
      args: SelectSubset<T, MusicasDeleteArgs>
    ): CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>>

    /**
     * Update one Musicas.
     * @param {MusicasUpdateArgs} args - Arguments to update one Musicas.
     * @example
     * // Update one Musicas
     * const musicas = await prisma.musicas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MusicasUpdateArgs>(
      args: SelectSubset<T, MusicasUpdateArgs>
    ): CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>>

    /**
     * Delete zero or more Musicas.
     * @param {MusicasDeleteManyArgs} args - Arguments to filter Musicas to delete.
     * @example
     * // Delete a few Musicas
     * const { count } = await prisma.musicas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MusicasDeleteManyArgs>(
      args?: SelectSubset<T, MusicasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Musicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Musicas
     * const musicas = await prisma.musicas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MusicasUpdateManyArgs>(
      args: SelectSubset<T, MusicasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Musicas.
     * @param {MusicasUpsertArgs} args - Arguments to update or create a Musicas.
     * @example
     * // Update or create a Musicas
     * const musicas = await prisma.musicas.upsert({
     *   create: {
     *     // ... data to create a Musicas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Musicas we want to update
     *   }
     * })
    **/
    upsert<T extends MusicasUpsertArgs>(
      args: SelectSubset<T, MusicasUpsertArgs>
    ): CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>>

    /**
     * Find one Musicas that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {MusicasFindUniqueOrThrowArgs} args - Arguments to find a Musicas
     * @example
     * // Get one Musicas
     * const musicas = await prisma.musicas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MusicasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MusicasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>>

    /**
     * Find the first Musicas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicasFindFirstOrThrowArgs} args - Arguments to find a Musicas
     * @example
     * // Get one Musicas
     * const musicas = await prisma.musicas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MusicasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MusicasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__MusicasClient<Musicas>, Prisma__MusicasClient<MusicasGetPayload<T>>>

    /**
     * Count the number of Musicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicasCountArgs} args - Arguments to filter Musicas to count.
     * @example
     * // Count the number of Musicas
     * const count = await prisma.musicas.count({
     *   where: {
     *     // ... the filter for the Musicas we want to count
     *   }
     * })
    **/
    count<T extends MusicasCountArgs>(
      args?: Subset<T, MusicasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MusicasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Musicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MusicasAggregateArgs>(args: Subset<T, MusicasAggregateArgs>): PrismaPromise<GetMusicasAggregateType<T>>

    /**
     * Group by Musicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MusicasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MusicasGroupByArgs['orderBy'] }
        : { orderBy?: MusicasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MusicasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMusicasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Musicas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MusicasClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    album<T extends AlbumArgs = {}>(args?: Subset<T, AlbumArgs>): CheckSelect<T, Prisma__AlbumClient<Album | Null>, Prisma__AlbumClient<AlbumGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Musicas base type for findUnique actions
   */
  export type MusicasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
    /**
     * Filter, which Musicas to fetch.
     * 
    **/
    where: MusicasWhereUniqueInput
  }

  /**
   * Musicas: findUnique
   */
  export interface MusicasFindUniqueArgs extends MusicasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Musicas base type for findFirst actions
   */
  export type MusicasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
    /**
     * Filter, which Musicas to fetch.
     * 
    **/
    where?: MusicasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicas to fetch.
     * 
    **/
    orderBy?: Enumerable<MusicasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Musicas.
     * 
    **/
    cursor?: MusicasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Musicas.
     * 
    **/
    distinct?: Enumerable<MusicasScalarFieldEnum>
  }

  /**
   * Musicas: findFirst
   */
  export interface MusicasFindFirstArgs extends MusicasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Musicas findMany
   */
  export type MusicasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
    /**
     * Filter, which Musicas to fetch.
     * 
    **/
    where?: MusicasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicas to fetch.
     * 
    **/
    orderBy?: Enumerable<MusicasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Musicas.
     * 
    **/
    cursor?: MusicasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MusicasScalarFieldEnum>
  }


  /**
   * Musicas create
   */
  export type MusicasCreateArgs = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
    /**
     * The data needed to create a Musicas.
     * 
    **/
    data: XOR<MusicasCreateInput, MusicasUncheckedCreateInput>
  }


  /**
   * Musicas createMany
   */
  export type MusicasCreateManyArgs = {
    /**
     * The data used to create many Musicas.
     * 
    **/
    data: Enumerable<MusicasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Musicas update
   */
  export type MusicasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
    /**
     * The data needed to update a Musicas.
     * 
    **/
    data: XOR<MusicasUpdateInput, MusicasUncheckedUpdateInput>
    /**
     * Choose, which Musicas to update.
     * 
    **/
    where: MusicasWhereUniqueInput
  }


  /**
   * Musicas updateMany
   */
  export type MusicasUpdateManyArgs = {
    /**
     * The data used to update Musicas.
     * 
    **/
    data: XOR<MusicasUpdateManyMutationInput, MusicasUncheckedUpdateManyInput>
    /**
     * Filter which Musicas to update
     * 
    **/
    where?: MusicasWhereInput
  }


  /**
   * Musicas upsert
   */
  export type MusicasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
    /**
     * The filter to search for the Musicas to update in case it exists.
     * 
    **/
    where: MusicasWhereUniqueInput
    /**
     * In case the Musicas found by the `where` argument doesn't exist, create a new Musicas with this data.
     * 
    **/
    create: XOR<MusicasCreateInput, MusicasUncheckedCreateInput>
    /**
     * In case the Musicas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MusicasUpdateInput, MusicasUncheckedUpdateInput>
  }


  /**
   * Musicas delete
   */
  export type MusicasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
    /**
     * Filter which Musicas to delete.
     * 
    **/
    where: MusicasWhereUniqueInput
  }


  /**
   * Musicas deleteMany
   */
  export type MusicasDeleteManyArgs = {
    /**
     * Filter which Musicas to delete
     * 
    **/
    where?: MusicasWhereInput
  }


  /**
   * Musicas: findUniqueOrThrow
   */
  export type MusicasFindUniqueOrThrowArgs = MusicasFindUniqueArgsBase
      

  /**
   * Musicas: findFirstOrThrow
   */
  export type MusicasFindFirstOrThrowArgs = MusicasFindFirstArgsBase
      

  /**
   * Musicas without action
   */
  export type MusicasArgs = {
    /**
     * Select specific fields to fetch from the Musicas
     * 
    **/
    select?: MusicasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MusicasInclude | null
  }



  /**
   * Model Vendas
   */


  export type AggregateVendas = {
    _count: VendasCountAggregateOutputType | null
    _avg: VendasAvgAggregateOutputType | null
    _sum: VendasSumAggregateOutputType | null
    _min: VendasMinAggregateOutputType | null
    _max: VendasMaxAggregateOutputType | null
  }

  export type VendasAvgAggregateOutputType = {
    id: number | null
    album_id: number | null
  }

  export type VendasSumAggregateOutputType = {
    id: number | null
    album_id: number | null
  }

  export type VendasMinAggregateOutputType = {
    id: number | null
    observacao: string | null
    album_id: number | null
  }

  export type VendasMaxAggregateOutputType = {
    id: number | null
    observacao: string | null
    album_id: number | null
  }

  export type VendasCountAggregateOutputType = {
    id: number
    observacao: number
    album_id: number
    _all: number
  }


  export type VendasAvgAggregateInputType = {
    id?: true
    album_id?: true
  }

  export type VendasSumAggregateInputType = {
    id?: true
    album_id?: true
  }

  export type VendasMinAggregateInputType = {
    id?: true
    observacao?: true
    album_id?: true
  }

  export type VendasMaxAggregateInputType = {
    id?: true
    observacao?: true
    album_id?: true
  }

  export type VendasCountAggregateInputType = {
    id?: true
    observacao?: true
    album_id?: true
    _all?: true
  }

  export type VendasAggregateArgs = {
    /**
     * Filter which Vendas to aggregate.
     * 
    **/
    where?: VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     * 
    **/
    orderBy?: Enumerable<VendasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendas
    **/
    _count?: true | VendasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendasMaxAggregateInputType
  }

  export type GetVendasAggregateType<T extends VendasAggregateArgs> = {
        [P in keyof T & keyof AggregateVendas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendas[P]>
      : GetScalarType<T[P], AggregateVendas[P]>
  }




  export type VendasGroupByArgs = {
    where?: VendasWhereInput
    orderBy?: Enumerable<VendasOrderByWithAggregationInput>
    by: Array<VendasScalarFieldEnum>
    having?: VendasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendasCountAggregateInputType | true
    _avg?: VendasAvgAggregateInputType
    _sum?: VendasSumAggregateInputType
    _min?: VendasMinAggregateInputType
    _max?: VendasMaxAggregateInputType
  }


  export type VendasGroupByOutputType = {
    id: number
    observacao: string
    album_id: number
    _count: VendasCountAggregateOutputType | null
    _avg: VendasAvgAggregateOutputType | null
    _sum: VendasSumAggregateOutputType | null
    _min: VendasMinAggregateOutputType | null
    _max: VendasMaxAggregateOutputType | null
  }

  type GetVendasGroupByPayload<T extends VendasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VendasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendasGroupByOutputType[P]>
            : GetScalarType<T[P], VendasGroupByOutputType[P]>
        }
      >
    >


  export type VendasSelect = {
    id?: boolean
    observacao?: boolean
    album_id?: boolean
    album?: boolean | AlbumArgs
  }

  export type VendasInclude = {
    album?: boolean | AlbumArgs
  }

  export type VendasGetPayload<
    S extends boolean | null | undefined | VendasArgs,
    U = keyof S
      > = S extends true
        ? Vendas
    : S extends undefined
    ? never
    : S extends VendasArgs | VendasFindManyArgs
    ?'include' extends U
    ? Vendas  & {
    [P in TrueKeys<S['include']>]:
        P extends 'album' ? AlbumGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'album' ? AlbumGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Vendas ? Vendas[P] : never
  } 
    : Vendas
  : Vendas


  type VendasCountArgs = Merge<
    Omit<VendasFindManyArgs, 'select' | 'include'> & {
      select?: VendasCountAggregateInputType | true
    }
  >

  export interface VendasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Vendas that matches the filter.
     * @param {VendasFindUniqueArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VendasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VendasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vendas'> extends True ? CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>> : CheckSelect<T, Prisma__VendasClient<Vendas | null, null>, Prisma__VendasClient<VendasGetPayload<T> | null, null>>

    /**
     * Find the first Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasFindFirstArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VendasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VendasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vendas'> extends True ? CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>> : CheckSelect<T, Prisma__VendasClient<Vendas | null, null>, Prisma__VendasClient<VendasGetPayload<T> | null, null>>

    /**
     * Find zero or more Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendas
     * const vendas = await prisma.vendas.findMany()
     * 
     * // Get first 10 Vendas
     * const vendas = await prisma.vendas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendasWithIdOnly = await prisma.vendas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VendasFindManyArgs>(
      args?: SelectSubset<T, VendasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vendas>>, PrismaPromise<Array<VendasGetPayload<T>>>>

    /**
     * Create a Vendas.
     * @param {VendasCreateArgs} args - Arguments to create a Vendas.
     * @example
     * // Create one Vendas
     * const Vendas = await prisma.vendas.create({
     *   data: {
     *     // ... data to create a Vendas
     *   }
     * })
     * 
    **/
    create<T extends VendasCreateArgs>(
      args: SelectSubset<T, VendasCreateArgs>
    ): CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>>

    /**
     * Create many Vendas.
     *     @param {VendasCreateManyArgs} args - Arguments to create many Vendas.
     *     @example
     *     // Create many Vendas
     *     const vendas = await prisma.vendas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VendasCreateManyArgs>(
      args?: SelectSubset<T, VendasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vendas.
     * @param {VendasDeleteArgs} args - Arguments to delete one Vendas.
     * @example
     * // Delete one Vendas
     * const Vendas = await prisma.vendas.delete({
     *   where: {
     *     // ... filter to delete one Vendas
     *   }
     * })
     * 
    **/
    delete<T extends VendasDeleteArgs>(
      args: SelectSubset<T, VendasDeleteArgs>
    ): CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>>

    /**
     * Update one Vendas.
     * @param {VendasUpdateArgs} args - Arguments to update one Vendas.
     * @example
     * // Update one Vendas
     * const vendas = await prisma.vendas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VendasUpdateArgs>(
      args: SelectSubset<T, VendasUpdateArgs>
    ): CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>>

    /**
     * Delete zero or more Vendas.
     * @param {VendasDeleteManyArgs} args - Arguments to filter Vendas to delete.
     * @example
     * // Delete a few Vendas
     * const { count } = await prisma.vendas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VendasDeleteManyArgs>(
      args?: SelectSubset<T, VendasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendas
     * const vendas = await prisma.vendas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VendasUpdateManyArgs>(
      args: SelectSubset<T, VendasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendas.
     * @param {VendasUpsertArgs} args - Arguments to update or create a Vendas.
     * @example
     * // Update or create a Vendas
     * const vendas = await prisma.vendas.upsert({
     *   create: {
     *     // ... data to create a Vendas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendas we want to update
     *   }
     * })
    **/
    upsert<T extends VendasUpsertArgs>(
      args: SelectSubset<T, VendasUpsertArgs>
    ): CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>>

    /**
     * Find one Vendas that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VendasFindUniqueOrThrowArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VendasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VendasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>>

    /**
     * Find the first Vendas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasFindFirstOrThrowArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VendasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VendasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VendasClient<Vendas>, Prisma__VendasClient<VendasGetPayload<T>>>

    /**
     * Count the number of Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasCountArgs} args - Arguments to filter Vendas to count.
     * @example
     * // Count the number of Vendas
     * const count = await prisma.vendas.count({
     *   where: {
     *     // ... the filter for the Vendas we want to count
     *   }
     * })
    **/
    count<T extends VendasCountArgs>(
      args?: Subset<T, VendasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendasAggregateArgs>(args: Subset<T, VendasAggregateArgs>): PrismaPromise<GetVendasAggregateType<T>>

    /**
     * Group by Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendasGroupByArgs['orderBy'] }
        : { orderBy?: VendasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VendasClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    album<T extends AlbumArgs = {}>(args?: Subset<T, AlbumArgs>): CheckSelect<T, Prisma__AlbumClient<Album | Null>, Prisma__AlbumClient<AlbumGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Vendas base type for findUnique actions
   */
  export type VendasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
    /**
     * Filter, which Vendas to fetch.
     * 
    **/
    where: VendasWhereUniqueInput
  }

  /**
   * Vendas: findUnique
   */
  export interface VendasFindUniqueArgs extends VendasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendas base type for findFirst actions
   */
  export type VendasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
    /**
     * Filter, which Vendas to fetch.
     * 
    **/
    where?: VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     * 
    **/
    orderBy?: Enumerable<VendasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendas.
     * 
    **/
    cursor?: VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendas.
     * 
    **/
    distinct?: Enumerable<VendasScalarFieldEnum>
  }

  /**
   * Vendas: findFirst
   */
  export interface VendasFindFirstArgs extends VendasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendas findMany
   */
  export type VendasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
    /**
     * Filter, which Vendas to fetch.
     * 
    **/
    where?: VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     * 
    **/
    orderBy?: Enumerable<VendasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendas.
     * 
    **/
    cursor?: VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VendasScalarFieldEnum>
  }


  /**
   * Vendas create
   */
  export type VendasCreateArgs = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
    /**
     * The data needed to create a Vendas.
     * 
    **/
    data: XOR<VendasCreateInput, VendasUncheckedCreateInput>
  }


  /**
   * Vendas createMany
   */
  export type VendasCreateManyArgs = {
    /**
     * The data used to create many Vendas.
     * 
    **/
    data: Enumerable<VendasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vendas update
   */
  export type VendasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
    /**
     * The data needed to update a Vendas.
     * 
    **/
    data: XOR<VendasUpdateInput, VendasUncheckedUpdateInput>
    /**
     * Choose, which Vendas to update.
     * 
    **/
    where: VendasWhereUniqueInput
  }


  /**
   * Vendas updateMany
   */
  export type VendasUpdateManyArgs = {
    /**
     * The data used to update Vendas.
     * 
    **/
    data: XOR<VendasUpdateManyMutationInput, VendasUncheckedUpdateManyInput>
    /**
     * Filter which Vendas to update
     * 
    **/
    where?: VendasWhereInput
  }


  /**
   * Vendas upsert
   */
  export type VendasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
    /**
     * The filter to search for the Vendas to update in case it exists.
     * 
    **/
    where: VendasWhereUniqueInput
    /**
     * In case the Vendas found by the `where` argument doesn't exist, create a new Vendas with this data.
     * 
    **/
    create: XOR<VendasCreateInput, VendasUncheckedCreateInput>
    /**
     * In case the Vendas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VendasUpdateInput, VendasUncheckedUpdateInput>
  }


  /**
   * Vendas delete
   */
  export type VendasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
    /**
     * Filter which Vendas to delete.
     * 
    **/
    where: VendasWhereUniqueInput
  }


  /**
   * Vendas deleteMany
   */
  export type VendasDeleteManyArgs = {
    /**
     * Filter which Vendas to delete
     * 
    **/
    where?: VendasWhereInput
  }


  /**
   * Vendas: findUniqueOrThrow
   */
  export type VendasFindUniqueOrThrowArgs = VendasFindUniqueArgsBase
      

  /**
   * Vendas: findFirstOrThrow
   */
  export type VendasFindFirstOrThrowArgs = VendasFindFirstArgsBase
      

  /**
   * Vendas without action
   */
  export type VendasArgs = {
    /**
     * Select specific fields to fetch from the Vendas
     * 
    **/
    select?: VendasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendasInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AlbumScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    ano: 'ano',
    artista_id: 'artista_id'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const ArtistaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type ArtistaScalarFieldEnum = (typeof ArtistaScalarFieldEnum)[keyof typeof ArtistaScalarFieldEnum]


  export const MusicasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    album_id: 'album_id'
  };

  export type MusicasScalarFieldEnum = (typeof MusicasScalarFieldEnum)[keyof typeof MusicasScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VendasScalarFieldEnum: {
    id: 'id',
    observacao: 'observacao',
    album_id: 'album_id'
  };

  export type VendasScalarFieldEnum = (typeof VendasScalarFieldEnum)[keyof typeof VendasScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ArtistaWhereInput = {
    AND?: Enumerable<ArtistaWhereInput>
    OR?: Enumerable<ArtistaWhereInput>
    NOT?: Enumerable<ArtistaWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    albuns?: AlbumListRelationFilter
  }

  export type ArtistaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    albuns?: AlbumOrderByRelationAggregateInput
  }

  export type ArtistaWhereUniqueInput = {
    id?: number
  }

  export type ArtistaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: ArtistaCountOrderByAggregateInput
    _avg?: ArtistaAvgOrderByAggregateInput
    _max?: ArtistaMaxOrderByAggregateInput
    _min?: ArtistaMinOrderByAggregateInput
    _sum?: ArtistaSumOrderByAggregateInput
  }

  export type ArtistaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ArtistaScalarWhereWithAggregatesInput>
    OR?: Enumerable<ArtistaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ArtistaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
  }

  export type AlbumWhereInput = {
    AND?: Enumerable<AlbumWhereInput>
    OR?: Enumerable<AlbumWhereInput>
    NOT?: Enumerable<AlbumWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    ano?: IntFilter | number
    artista_id?: IntFilter | number
    artista?: XOR<ArtistaRelationFilter, ArtistaWhereInput>
    musicas?: MusicasListRelationFilter
    vendas?: VendasListRelationFilter
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    artista_id?: SortOrder
    artista?: ArtistaOrderByWithRelationInput
    musicas?: MusicasOrderByRelationAggregateInput
    vendas?: VendasOrderByRelationAggregateInput
  }

  export type AlbumWhereUniqueInput = {
    id?: number
  }

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    artista_id?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _avg?: AlbumAvgOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
    _sum?: AlbumSumOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AlbumScalarWhereWithAggregatesInput>
    OR?: Enumerable<AlbumScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AlbumScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    ano?: IntWithAggregatesFilter | number
    artista_id?: IntWithAggregatesFilter | number
  }

  export type MusicasWhereInput = {
    AND?: Enumerable<MusicasWhereInput>
    OR?: Enumerable<MusicasWhereInput>
    NOT?: Enumerable<MusicasWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    album_id?: IntFilter | number
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
  }

  export type MusicasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    album_id?: SortOrder
    album?: AlbumOrderByWithRelationInput
  }

  export type MusicasWhereUniqueInput = {
    id?: number
  }

  export type MusicasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    album_id?: SortOrder
    _count?: MusicasCountOrderByAggregateInput
    _avg?: MusicasAvgOrderByAggregateInput
    _max?: MusicasMaxOrderByAggregateInput
    _min?: MusicasMinOrderByAggregateInput
    _sum?: MusicasSumOrderByAggregateInput
  }

  export type MusicasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MusicasScalarWhereWithAggregatesInput>
    OR?: Enumerable<MusicasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MusicasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    album_id?: IntWithAggregatesFilter | number
  }

  export type VendasWhereInput = {
    AND?: Enumerable<VendasWhereInput>
    OR?: Enumerable<VendasWhereInput>
    NOT?: Enumerable<VendasWhereInput>
    id?: IntFilter | number
    observacao?: StringFilter | string
    album_id?: IntFilter | number
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
  }

  export type VendasOrderByWithRelationInput = {
    id?: SortOrder
    observacao?: SortOrder
    album_id?: SortOrder
    album?: AlbumOrderByWithRelationInput
  }

  export type VendasWhereUniqueInput = {
    id?: number
  }

  export type VendasOrderByWithAggregationInput = {
    id?: SortOrder
    observacao?: SortOrder
    album_id?: SortOrder
    _count?: VendasCountOrderByAggregateInput
    _avg?: VendasAvgOrderByAggregateInput
    _max?: VendasMaxOrderByAggregateInput
    _min?: VendasMinOrderByAggregateInput
    _sum?: VendasSumOrderByAggregateInput
  }

  export type VendasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VendasScalarWhereWithAggregatesInput>
    OR?: Enumerable<VendasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VendasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    observacao?: StringWithAggregatesFilter | string
    album_id?: IntWithAggregatesFilter | number
  }

  export type ArtistaCreateInput = {
    nome: string
    albuns?: AlbumCreateNestedManyWithoutArtistaInput
  }

  export type ArtistaUncheckedCreateInput = {
    id?: number
    nome: string
    albuns?: AlbumUncheckedCreateNestedManyWithoutArtistaInput
  }

  export type ArtistaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    albuns?: AlbumUpdateManyWithoutArtistaNestedInput
  }

  export type ArtistaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    albuns?: AlbumUncheckedUpdateManyWithoutArtistaNestedInput
  }

  export type ArtistaCreateManyInput = {
    id?: number
    nome: string
  }

  export type ArtistaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ArtistaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumCreateInput = {
    nome: string
    ano: number
    artista: ArtistaCreateNestedOneWithoutAlbunsInput
    musicas?: MusicasCreateNestedManyWithoutAlbumInput
    vendas?: VendasCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: number
    nome: string
    ano: number
    artista_id: number
    musicas?: MusicasUncheckedCreateNestedManyWithoutAlbumInput
    vendas?: VendasUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    artista?: ArtistaUpdateOneRequiredWithoutAlbunsNestedInput
    musicas?: MusicasUpdateManyWithoutAlbumNestedInput
    vendas?: VendasUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    artista_id?: IntFieldUpdateOperationsInput | number
    musicas?: MusicasUncheckedUpdateManyWithoutAlbumNestedInput
    vendas?: VendasUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: number
    nome: string
    ano: number
    artista_id: number
  }

  export type AlbumUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    artista_id?: IntFieldUpdateOperationsInput | number
  }

  export type MusicasCreateInput = {
    nome: string
    album: AlbumCreateNestedOneWithoutMusicasInput
  }

  export type MusicasUncheckedCreateInput = {
    id?: number
    nome: string
    album_id: number
  }

  export type MusicasUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    album?: AlbumUpdateOneRequiredWithoutMusicasNestedInput
  }

  export type MusicasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type MusicasCreateManyInput = {
    id?: number
    nome: string
    album_id: number
  }

  export type MusicasUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MusicasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type VendasCreateInput = {
    observacao: string
    album: AlbumCreateNestedOneWithoutVendasInput
  }

  export type VendasUncheckedCreateInput = {
    id?: number
    observacao: string
    album_id: number
  }

  export type VendasUpdateInput = {
    observacao?: StringFieldUpdateOperationsInput | string
    album?: AlbumUpdateOneRequiredWithoutVendasNestedInput
  }

  export type VendasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    observacao?: StringFieldUpdateOperationsInput | string
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type VendasCreateManyInput = {
    id?: number
    observacao: string
    album_id: number
  }

  export type VendasUpdateManyMutationInput = {
    observacao?: StringFieldUpdateOperationsInput | string
  }

  export type VendasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    observacao?: StringFieldUpdateOperationsInput | string
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type AlbumListRelationFilter = {
    every?: AlbumWhereInput
    some?: AlbumWhereInput
    none?: AlbumWhereInput
  }

  export type AlbumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtistaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ArtistaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArtistaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ArtistaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ArtistaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type ArtistaRelationFilter = {
    is?: ArtistaWhereInput
    isNot?: ArtistaWhereInput
  }

  export type MusicasListRelationFilter = {
    every?: MusicasWhereInput
    some?: MusicasWhereInput
    none?: MusicasWhereInput
  }

  export type VendasListRelationFilter = {
    every?: VendasWhereInput
    some?: VendasWhereInput
    none?: VendasWhereInput
  }

  export type MusicasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    artista_id?: SortOrder
  }

  export type AlbumAvgOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    artista_id?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    artista_id?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    artista_id?: SortOrder
  }

  export type AlbumSumOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    artista_id?: SortOrder
  }

  export type AlbumRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type MusicasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    album_id?: SortOrder
  }

  export type MusicasAvgOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
  }

  export type MusicasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    album_id?: SortOrder
  }

  export type MusicasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    album_id?: SortOrder
  }

  export type MusicasSumOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
  }

  export type VendasCountOrderByAggregateInput = {
    id?: SortOrder
    observacao?: SortOrder
    album_id?: SortOrder
  }

  export type VendasAvgOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
  }

  export type VendasMaxOrderByAggregateInput = {
    id?: SortOrder
    observacao?: SortOrder
    album_id?: SortOrder
  }

  export type VendasMinOrderByAggregateInput = {
    id?: SortOrder
    observacao?: SortOrder
    album_id?: SortOrder
  }

  export type VendasSumOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
  }

  export type AlbumCreateNestedManyWithoutArtistaInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistaInput>, Enumerable<AlbumUncheckedCreateWithoutArtistaInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistaInput>
    createMany?: AlbumCreateManyArtistaInputEnvelope
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type AlbumUncheckedCreateNestedManyWithoutArtistaInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistaInput>, Enumerable<AlbumUncheckedCreateWithoutArtistaInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistaInput>
    createMany?: AlbumCreateManyArtistaInputEnvelope
    connect?: Enumerable<AlbumWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AlbumUpdateManyWithoutArtistaNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistaInput>, Enumerable<AlbumUncheckedCreateWithoutArtistaInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistaInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutArtistaInput>
    createMany?: AlbumCreateManyArtistaInputEnvelope
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutArtistaInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutArtistaInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AlbumUncheckedUpdateManyWithoutArtistaNestedInput = {
    create?: XOR<Enumerable<AlbumCreateWithoutArtistaInput>, Enumerable<AlbumUncheckedCreateWithoutArtistaInput>>
    connectOrCreate?: Enumerable<AlbumCreateOrConnectWithoutArtistaInput>
    upsert?: Enumerable<AlbumUpsertWithWhereUniqueWithoutArtistaInput>
    createMany?: AlbumCreateManyArtistaInputEnvelope
    set?: Enumerable<AlbumWhereUniqueInput>
    disconnect?: Enumerable<AlbumWhereUniqueInput>
    delete?: Enumerable<AlbumWhereUniqueInput>
    connect?: Enumerable<AlbumWhereUniqueInput>
    update?: Enumerable<AlbumUpdateWithWhereUniqueWithoutArtistaInput>
    updateMany?: Enumerable<AlbumUpdateManyWithWhereWithoutArtistaInput>
    deleteMany?: Enumerable<AlbumScalarWhereInput>
  }

  export type ArtistaCreateNestedOneWithoutAlbunsInput = {
    create?: XOR<ArtistaCreateWithoutAlbunsInput, ArtistaUncheckedCreateWithoutAlbunsInput>
    connectOrCreate?: ArtistaCreateOrConnectWithoutAlbunsInput
    connect?: ArtistaWhereUniqueInput
  }

  export type MusicasCreateNestedManyWithoutAlbumInput = {
    create?: XOR<Enumerable<MusicasCreateWithoutAlbumInput>, Enumerable<MusicasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<MusicasCreateOrConnectWithoutAlbumInput>
    createMany?: MusicasCreateManyAlbumInputEnvelope
    connect?: Enumerable<MusicasWhereUniqueInput>
  }

  export type VendasCreateNestedManyWithoutAlbumInput = {
    create?: XOR<Enumerable<VendasCreateWithoutAlbumInput>, Enumerable<VendasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<VendasCreateOrConnectWithoutAlbumInput>
    createMany?: VendasCreateManyAlbumInputEnvelope
    connect?: Enumerable<VendasWhereUniqueInput>
  }

  export type MusicasUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<Enumerable<MusicasCreateWithoutAlbumInput>, Enumerable<MusicasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<MusicasCreateOrConnectWithoutAlbumInput>
    createMany?: MusicasCreateManyAlbumInputEnvelope
    connect?: Enumerable<MusicasWhereUniqueInput>
  }

  export type VendasUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<Enumerable<VendasCreateWithoutAlbumInput>, Enumerable<VendasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<VendasCreateOrConnectWithoutAlbumInput>
    createMany?: VendasCreateManyAlbumInputEnvelope
    connect?: Enumerable<VendasWhereUniqueInput>
  }

  export type ArtistaUpdateOneRequiredWithoutAlbunsNestedInput = {
    create?: XOR<ArtistaCreateWithoutAlbunsInput, ArtistaUncheckedCreateWithoutAlbunsInput>
    connectOrCreate?: ArtistaCreateOrConnectWithoutAlbunsInput
    upsert?: ArtistaUpsertWithoutAlbunsInput
    connect?: ArtistaWhereUniqueInput
    update?: XOR<ArtistaUpdateWithoutAlbunsInput, ArtistaUncheckedUpdateWithoutAlbunsInput>
  }

  export type MusicasUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<Enumerable<MusicasCreateWithoutAlbumInput>, Enumerable<MusicasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<MusicasCreateOrConnectWithoutAlbumInput>
    upsert?: Enumerable<MusicasUpsertWithWhereUniqueWithoutAlbumInput>
    createMany?: MusicasCreateManyAlbumInputEnvelope
    set?: Enumerable<MusicasWhereUniqueInput>
    disconnect?: Enumerable<MusicasWhereUniqueInput>
    delete?: Enumerable<MusicasWhereUniqueInput>
    connect?: Enumerable<MusicasWhereUniqueInput>
    update?: Enumerable<MusicasUpdateWithWhereUniqueWithoutAlbumInput>
    updateMany?: Enumerable<MusicasUpdateManyWithWhereWithoutAlbumInput>
    deleteMany?: Enumerable<MusicasScalarWhereInput>
  }

  export type VendasUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<Enumerable<VendasCreateWithoutAlbumInput>, Enumerable<VendasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<VendasCreateOrConnectWithoutAlbumInput>
    upsert?: Enumerable<VendasUpsertWithWhereUniqueWithoutAlbumInput>
    createMany?: VendasCreateManyAlbumInputEnvelope
    set?: Enumerable<VendasWhereUniqueInput>
    disconnect?: Enumerable<VendasWhereUniqueInput>
    delete?: Enumerable<VendasWhereUniqueInput>
    connect?: Enumerable<VendasWhereUniqueInput>
    update?: Enumerable<VendasUpdateWithWhereUniqueWithoutAlbumInput>
    updateMany?: Enumerable<VendasUpdateManyWithWhereWithoutAlbumInput>
    deleteMany?: Enumerable<VendasScalarWhereInput>
  }

  export type MusicasUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<Enumerable<MusicasCreateWithoutAlbumInput>, Enumerable<MusicasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<MusicasCreateOrConnectWithoutAlbumInput>
    upsert?: Enumerable<MusicasUpsertWithWhereUniqueWithoutAlbumInput>
    createMany?: MusicasCreateManyAlbumInputEnvelope
    set?: Enumerable<MusicasWhereUniqueInput>
    disconnect?: Enumerable<MusicasWhereUniqueInput>
    delete?: Enumerable<MusicasWhereUniqueInput>
    connect?: Enumerable<MusicasWhereUniqueInput>
    update?: Enumerable<MusicasUpdateWithWhereUniqueWithoutAlbumInput>
    updateMany?: Enumerable<MusicasUpdateManyWithWhereWithoutAlbumInput>
    deleteMany?: Enumerable<MusicasScalarWhereInput>
  }

  export type VendasUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<Enumerable<VendasCreateWithoutAlbumInput>, Enumerable<VendasUncheckedCreateWithoutAlbumInput>>
    connectOrCreate?: Enumerable<VendasCreateOrConnectWithoutAlbumInput>
    upsert?: Enumerable<VendasUpsertWithWhereUniqueWithoutAlbumInput>
    createMany?: VendasCreateManyAlbumInputEnvelope
    set?: Enumerable<VendasWhereUniqueInput>
    disconnect?: Enumerable<VendasWhereUniqueInput>
    delete?: Enumerable<VendasWhereUniqueInput>
    connect?: Enumerable<VendasWhereUniqueInput>
    update?: Enumerable<VendasUpdateWithWhereUniqueWithoutAlbumInput>
    updateMany?: Enumerable<VendasUpdateManyWithWhereWithoutAlbumInput>
    deleteMany?: Enumerable<VendasScalarWhereInput>
  }

  export type AlbumCreateNestedOneWithoutMusicasInput = {
    create?: XOR<AlbumCreateWithoutMusicasInput, AlbumUncheckedCreateWithoutMusicasInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutMusicasInput
    connect?: AlbumWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutMusicasNestedInput = {
    create?: XOR<AlbumCreateWithoutMusicasInput, AlbumUncheckedCreateWithoutMusicasInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutMusicasInput
    upsert?: AlbumUpsertWithoutMusicasInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<AlbumUpdateWithoutMusicasInput, AlbumUncheckedUpdateWithoutMusicasInput>
  }

  export type AlbumCreateNestedOneWithoutVendasInput = {
    create?: XOR<AlbumCreateWithoutVendasInput, AlbumUncheckedCreateWithoutVendasInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutVendasInput
    connect?: AlbumWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutVendasNestedInput = {
    create?: XOR<AlbumCreateWithoutVendasInput, AlbumUncheckedCreateWithoutVendasInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutVendasInput
    upsert?: AlbumUpsertWithoutVendasInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<AlbumUpdateWithoutVendasInput, AlbumUncheckedUpdateWithoutVendasInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type AlbumCreateWithoutArtistaInput = {
    nome: string
    ano: number
    musicas?: MusicasCreateNestedManyWithoutAlbumInput
    vendas?: VendasCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutArtistaInput = {
    id?: number
    nome: string
    ano: number
    musicas?: MusicasUncheckedCreateNestedManyWithoutAlbumInput
    vendas?: VendasUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutArtistaInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput>
  }

  export type AlbumCreateManyArtistaInputEnvelope = {
    data: Enumerable<AlbumCreateManyArtistaInput>
    skipDuplicates?: boolean
  }

  export type AlbumUpsertWithWhereUniqueWithoutArtistaInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutArtistaInput, AlbumUncheckedUpdateWithoutArtistaInput>
    create: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutArtistaInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutArtistaInput, AlbumUncheckedUpdateWithoutArtistaInput>
  }

  export type AlbumUpdateManyWithWhereWithoutArtistaInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutAlbunsInput>
  }

  export type AlbumScalarWhereInput = {
    AND?: Enumerable<AlbumScalarWhereInput>
    OR?: Enumerable<AlbumScalarWhereInput>
    NOT?: Enumerable<AlbumScalarWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    ano?: IntFilter | number
    artista_id?: IntFilter | number
  }

  export type ArtistaCreateWithoutAlbunsInput = {
    nome: string
  }

  export type ArtistaUncheckedCreateWithoutAlbunsInput = {
    id?: number
    nome: string
  }

  export type ArtistaCreateOrConnectWithoutAlbunsInput = {
    where: ArtistaWhereUniqueInput
    create: XOR<ArtistaCreateWithoutAlbunsInput, ArtistaUncheckedCreateWithoutAlbunsInput>
  }

  export type MusicasCreateWithoutAlbumInput = {
    nome: string
  }

  export type MusicasUncheckedCreateWithoutAlbumInput = {
    id?: number
    nome: string
  }

  export type MusicasCreateOrConnectWithoutAlbumInput = {
    where: MusicasWhereUniqueInput
    create: XOR<MusicasCreateWithoutAlbumInput, MusicasUncheckedCreateWithoutAlbumInput>
  }

  export type MusicasCreateManyAlbumInputEnvelope = {
    data: Enumerable<MusicasCreateManyAlbumInput>
    skipDuplicates?: boolean
  }

  export type VendasCreateWithoutAlbumInput = {
    observacao: string
  }

  export type VendasUncheckedCreateWithoutAlbumInput = {
    id?: number
    observacao: string
  }

  export type VendasCreateOrConnectWithoutAlbumInput = {
    where: VendasWhereUniqueInput
    create: XOR<VendasCreateWithoutAlbumInput, VendasUncheckedCreateWithoutAlbumInput>
  }

  export type VendasCreateManyAlbumInputEnvelope = {
    data: Enumerable<VendasCreateManyAlbumInput>
    skipDuplicates?: boolean
  }

  export type ArtistaUpsertWithoutAlbunsInput = {
    update: XOR<ArtistaUpdateWithoutAlbunsInput, ArtistaUncheckedUpdateWithoutAlbunsInput>
    create: XOR<ArtistaCreateWithoutAlbunsInput, ArtistaUncheckedCreateWithoutAlbunsInput>
  }

  export type ArtistaUpdateWithoutAlbunsInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ArtistaUncheckedUpdateWithoutAlbunsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MusicasUpsertWithWhereUniqueWithoutAlbumInput = {
    where: MusicasWhereUniqueInput
    update: XOR<MusicasUpdateWithoutAlbumInput, MusicasUncheckedUpdateWithoutAlbumInput>
    create: XOR<MusicasCreateWithoutAlbumInput, MusicasUncheckedCreateWithoutAlbumInput>
  }

  export type MusicasUpdateWithWhereUniqueWithoutAlbumInput = {
    where: MusicasWhereUniqueInput
    data: XOR<MusicasUpdateWithoutAlbumInput, MusicasUncheckedUpdateWithoutAlbumInput>
  }

  export type MusicasUpdateManyWithWhereWithoutAlbumInput = {
    where: MusicasScalarWhereInput
    data: XOR<MusicasUpdateManyMutationInput, MusicasUncheckedUpdateManyWithoutMusicasInput>
  }

  export type MusicasScalarWhereInput = {
    AND?: Enumerable<MusicasScalarWhereInput>
    OR?: Enumerable<MusicasScalarWhereInput>
    NOT?: Enumerable<MusicasScalarWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    album_id?: IntFilter | number
  }

  export type VendasUpsertWithWhereUniqueWithoutAlbumInput = {
    where: VendasWhereUniqueInput
    update: XOR<VendasUpdateWithoutAlbumInput, VendasUncheckedUpdateWithoutAlbumInput>
    create: XOR<VendasCreateWithoutAlbumInput, VendasUncheckedCreateWithoutAlbumInput>
  }

  export type VendasUpdateWithWhereUniqueWithoutAlbumInput = {
    where: VendasWhereUniqueInput
    data: XOR<VendasUpdateWithoutAlbumInput, VendasUncheckedUpdateWithoutAlbumInput>
  }

  export type VendasUpdateManyWithWhereWithoutAlbumInput = {
    where: VendasScalarWhereInput
    data: XOR<VendasUpdateManyMutationInput, VendasUncheckedUpdateManyWithoutVendasInput>
  }

  export type VendasScalarWhereInput = {
    AND?: Enumerable<VendasScalarWhereInput>
    OR?: Enumerable<VendasScalarWhereInput>
    NOT?: Enumerable<VendasScalarWhereInput>
    id?: IntFilter | number
    observacao?: StringFilter | string
    album_id?: IntFilter | number
  }

  export type AlbumCreateWithoutMusicasInput = {
    nome: string
    ano: number
    artista: ArtistaCreateNestedOneWithoutAlbunsInput
    vendas?: VendasCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutMusicasInput = {
    id?: number
    nome: string
    ano: number
    artista_id: number
    vendas?: VendasUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutMusicasInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutMusicasInput, AlbumUncheckedCreateWithoutMusicasInput>
  }

  export type AlbumUpsertWithoutMusicasInput = {
    update: XOR<AlbumUpdateWithoutMusicasInput, AlbumUncheckedUpdateWithoutMusicasInput>
    create: XOR<AlbumCreateWithoutMusicasInput, AlbumUncheckedCreateWithoutMusicasInput>
  }

  export type AlbumUpdateWithoutMusicasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    artista?: ArtistaUpdateOneRequiredWithoutAlbunsNestedInput
    vendas?: VendasUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutMusicasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    artista_id?: IntFieldUpdateOperationsInput | number
    vendas?: VendasUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateWithoutVendasInput = {
    nome: string
    ano: number
    artista: ArtistaCreateNestedOneWithoutAlbunsInput
    musicas?: MusicasCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutVendasInput = {
    id?: number
    nome: string
    ano: number
    artista_id: number
    musicas?: MusicasUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutVendasInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutVendasInput, AlbumUncheckedCreateWithoutVendasInput>
  }

  export type AlbumUpsertWithoutVendasInput = {
    update: XOR<AlbumUpdateWithoutVendasInput, AlbumUncheckedUpdateWithoutVendasInput>
    create: XOR<AlbumCreateWithoutVendasInput, AlbumUncheckedCreateWithoutVendasInput>
  }

  export type AlbumUpdateWithoutVendasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    artista?: ArtistaUpdateOneRequiredWithoutAlbunsNestedInput
    musicas?: MusicasUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutVendasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    artista_id?: IntFieldUpdateOperationsInput | number
    musicas?: MusicasUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyArtistaInput = {
    id?: number
    nome: string
    ano: number
  }

  export type AlbumUpdateWithoutArtistaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    musicas?: MusicasUpdateManyWithoutAlbumNestedInput
    vendas?: VendasUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutArtistaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    musicas?: MusicasUncheckedUpdateManyWithoutAlbumNestedInput
    vendas?: VendasUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateManyWithoutAlbunsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
  }

  export type MusicasCreateManyAlbumInput = {
    id?: number
    nome: string
  }

  export type VendasCreateManyAlbumInput = {
    id?: number
    observacao: string
  }

  export type MusicasUpdateWithoutAlbumInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MusicasUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MusicasUncheckedUpdateManyWithoutMusicasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type VendasUpdateWithoutAlbumInput = {
    observacao?: StringFieldUpdateOperationsInput | string
  }

  export type VendasUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    observacao?: StringFieldUpdateOperationsInput | string
  }

  export type VendasUncheckedUpdateManyWithoutVendasInput = {
    id?: IntFieldUpdateOperationsInput | number
    observacao?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}